name: Setup Opened Issues

on:
  issues:
    # issue가 open, reopen될 때 실행
    types: [ opened, reopened ]

jobs:
  setup_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Set Assignees
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, repository } = context.payload;
            const author = issue.user.login;

            await github.rest.issues.addAssignees({
              owner: repository.owner.login,
              repo: repository.name,
              issue_number: issue.number,
              assignees: [author],
            });

      - name: Set Labels
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, repository } = context.payload;
            
            const labels = [];
            // author 기반 라벨 추가
            const feTeam = [];
            const beTeam = ['threepebbles', 'RaZel713'];
            
            const author = issue.user.login;
            const authorLabel = feTeam.includes(author) ? 'frontend' : beTeam.includes(author) ? 'backend' : null;
            if (authorLabel) labels.push(authorLabel);
            
            // author별 닉네임 라벨 매핑
            const personalLabelMap = {
              threepebbles: '🍍 헤일러',
              RaZel713: '🍋 라젤',
            };
            const personalLabel = personalLabelMap[author];
            if (personalLabel) labels.push(personalLabel);
            
            // 중복 제거
            const uniqueLabels = [...new Set(labels)];
            
            if (uniqueLabels.length) {
              await github.rest.issues.addLabels({
                owner: repository.owner.login,
                repo: repository.name,
                issue_number: issue.number,
                labels: uniqueLabels,
              });
            }

      - name: Set Projects
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_V2_TOKEN }}
          script: |
            // GitHub Project id
            const projectId = 'PVT_kwHOAaxoFs4A9lXt';
            const { issue } = context.payload;
            
            const fieldData = await github.graphql(
              `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 100) {
                      nodes {
                        __typename
            
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
            
                        ... on ProjectV2SingleSelectField {
                          options {
                            id
                            name
                          }
                        }
            
                        ... on ProjectV2IterationField {
                          configuration {
                            __typename
                            ... on ProjectV2IterationFieldConfiguration {
                              iterations {
                                id
                                startDate
                                duration
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              `,
              { projectId }
            );
            const fields = fieldData.node.fields.nodes;
            
            // 1. Issue를 Project에 추가 (이미 있으면 기존 item id를 반환)
            const addItemResponse = await github.graphql(
              `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
              `, 
              { projectId, contentId: issue.node_id }
            );
            const issueItemId = addItemResponse.addProjectV2ItemById.item.id;

            // 2. Status 필드를 Todo로 설정
            const statusField = fields.find(f =>
              f.__typename === 'ProjectV2SingleSelectField' &&
              f.name?.toLowerCase() === 'status'
            );
            const statusFieldId = statusField?.id;
            const todoOptionId = statusField?.options?.find(o => o.name.toLowerCase() === 'todo')?.id;
            
            if (statusFieldId && todoOptionId) {
              await github.graphql(
                `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
                `, 
                { projectId: projectId, itemId: issueItemId, fieldId: statusFieldId, optionId: todoOptionId }
              );
            }

            // 3. Start Date을 today로 설정
            const openedAt = new Date(context.payload.action === 'reopened'
              ? issue.updated_at 
              : issue.created_at);
            const startDate = openedAt.toISOString().split('T')[0];

            const startDateField = fields.find(f =>
              f.__typename === 'ProjectV2Field' &&
              f.name?.toLowerCase() === 'start date'
            );
            const startDateFieldId = startDateField?.id;

            if (startDateFieldId) {
              await github.graphql(
                `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $date: Date!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { date: $date }
                  }) { projectV2Item { id } }
                }
                `,
                { projectId, itemId: issueItemId, fieldId: startDateFieldId, date: startDate }
              );
            }
            
            // 4. Sprint(iteration) 설정
            const iterationField = fields.find(f =>
              f.__typename === 'ProjectV2IterationField' &&
              f.configuration?.__typename === 'ProjectV2IterationFieldConfiguration'
            );
            const iterationFieldId = iterationField?.id;
            const iterations = iterationField?.configuration?.iterations ?? [];

            // 오늘이 포함된 iteration 찾기
            function isDateInRange(startISOString, durationDays, today) {
              const s = new Date(startISOString);
              const e = new Date(s);
              e.setDate(e.getDate() + durationDays);
              return today >= s && today < e;
            }

            const matchingIteration = iterations.find(i => isDateInRange(i.startDate, i.duration, openedAt));

            if (iterationFieldId && matchingIteration?.id) {
              await github.graphql(
                `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $iterationId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { iterationId: $iterationId }
                  }) { projectV2Item { id } }
                }
                `,
                 { projectId, itemId: issueItemId, fieldId: iterationFieldId, iterationId: matchingIteration.id }
                );
            }
